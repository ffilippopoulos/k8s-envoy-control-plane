/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ffilippopoulos/k8s-envoy-control-plane/pkg/apis/egresslistener/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EgressListenerLister helps list EgressListeners.
type EgressListenerLister interface {
	// List lists all EgressListeners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EgressListener, err error)
	// EgressListeners returns an object that can list and get EgressListeners.
	EgressListeners(namespace string) EgressListenerNamespaceLister
	EgressListenerListerExpansion
}

// egressListenerLister implements the EgressListenerLister interface.
type egressListenerLister struct {
	indexer cache.Indexer
}

// NewEgressListenerLister returns a new EgressListenerLister.
func NewEgressListenerLister(indexer cache.Indexer) EgressListenerLister {
	return &egressListenerLister{indexer: indexer}
}

// List lists all EgressListeners in the indexer.
func (s *egressListenerLister) List(selector labels.Selector) (ret []*v1alpha1.EgressListener, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EgressListener))
	})
	return ret, err
}

// EgressListeners returns an object that can list and get EgressListeners.
func (s *egressListenerLister) EgressListeners(namespace string) EgressListenerNamespaceLister {
	return egressListenerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EgressListenerNamespaceLister helps list and get EgressListeners.
type EgressListenerNamespaceLister interface {
	// List lists all EgressListeners in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EgressListener, err error)
	// Get retrieves the EgressListener from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EgressListener, error)
	EgressListenerNamespaceListerExpansion
}

// egressListenerNamespaceLister implements the EgressListenerNamespaceLister
// interface.
type egressListenerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EgressListeners in the indexer for a given namespace.
func (s egressListenerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EgressListener, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EgressListener))
	})
	return ret, err
}

// Get retrieves the EgressListener from the indexer for a given namespace and name.
func (s egressListenerNamespaceLister) Get(name string) (*v1alpha1.EgressListener, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("egresslistener"), name)
	}
	return obj.(*v1alpha1.EgressListener), nil
}
