/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ffilippopoulos/k8s-envoy-control-plane/pkg/apis/ingresslistener/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressListenerLister helps list IngressListeners.
type IngressListenerLister interface {
	// List lists all IngressListeners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IngressListener, err error)
	// IngressListeners returns an object that can list and get IngressListeners.
	IngressListeners(namespace string) IngressListenerNamespaceLister
	IngressListenerListerExpansion
}

// ingressListenerLister implements the IngressListenerLister interface.
type ingressListenerLister struct {
	indexer cache.Indexer
}

// NewIngressListenerLister returns a new IngressListenerLister.
func NewIngressListenerLister(indexer cache.Indexer) IngressListenerLister {
	return &ingressListenerLister{indexer: indexer}
}

// List lists all IngressListeners in the indexer.
func (s *ingressListenerLister) List(selector labels.Selector) (ret []*v1alpha1.IngressListener, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressListener))
	})
	return ret, err
}

// IngressListeners returns an object that can list and get IngressListeners.
func (s *ingressListenerLister) IngressListeners(namespace string) IngressListenerNamespaceLister {
	return ingressListenerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressListenerNamespaceLister helps list and get IngressListeners.
type IngressListenerNamespaceLister interface {
	// List lists all IngressListeners in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IngressListener, err error)
	// Get retrieves the IngressListener from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IngressListener, error)
	IngressListenerNamespaceListerExpansion
}

// ingressListenerNamespaceLister implements the IngressListenerNamespaceLister
// interface.
type ingressListenerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressListeners in the indexer for a given namespace.
func (s ingressListenerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngressListener, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressListener))
	})
	return ret, err
}

// Get retrieves the IngressListener from the indexer for a given namespace and name.
func (s ingressListenerNamespaceLister) Get(name string) (*v1alpha1.IngressListener, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingresslistener"), name)
	}
	return obj.(*v1alpha1.IngressListener), nil
}
